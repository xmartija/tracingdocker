input {
    udp {
        port => "${INPUT_UDP_PORT}"
        type => syslog
    }
}

filter {

  #general filter
  grok {
    match => [ "message", "%{SYSLOG5424PRI}%{NONNEGINT:ver} +(?:%{TIMESTAMP_ISO8601:ts}|-) +(?:%{HOSTNAME:containerid}|-) +(?:%{NOTSPACE:containername}|-) +(?:%{NOTSPACE:proc}|-) +(?:%{WORD:msgid}|-) +(?:%{SYSLOG5424SD:sd}|-|) +%{GREEDYDATA:message}" ]
    overwrite => [ "message" ]
  }


  grok {
    #match => [ "message", "(?m)^%{SPACE}%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:loglevel}%{SPACE}?%{NUMBER}?%{SPACE}---%{SPACE}(?:\[%{DATA:threadname}\])?%{SPACE}%{DATA:classname}%{SPACE}:%{SPACE}%{GREEDYDATA:logmessage}" ]
    #TODO verify multilines work
    #from http://cloud.spring.io/spring-cloud-sleuth/2.0.x/single/spring-cloud-sleuth.htm
    match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}\s+%{LOGLEVEL:severity}\s+\[%{DATA:service},%{DATA:trace},%{DATA:span},%{DATA:exportable}\]\s+%{DATA:pid}\s+---\s+\[%{DATA:thread}\]\s+%{DATA:class}\s+:\s+%{GREEDYDATA:rest}" }

  }

  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
    remove_field => ["timestamp"]
  }

  if !("_grokparsefailure" in [tags]) {
    mutate {
      replace => [ "source_host", "%{containername}" ]
      replace => [ "raw_message", "%{message}" ]
      replace => [ "message", "%{logmessage}" ]
      remove_field => [ "logmessage", "host", "source_host" ]
    }
  }
  mutate {
    strip => [ "threadname" ]
  }
}

output {
    elasticsearch {
        hosts => ["${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"]
    }
    stdout {
        codec => rubydebug
    }
}
